# Server
server.port=8082

# Datasource (H2 quick demo)
spring.datasource.url=jdbc:h2:mem:splitwise;DB_CLOSE_DELAY=-1;MODE=PostgreSQL
spring.datasource.username=sa
spring.datasource.password=test123
spring.datasource.driver-class-name=org.h2.Driver

# JPA / Flyway
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.flyway.enabled=true

# Management / Actuator
management.endpoints.web.exposure.include=health,info,metrics,prometheus

# Logging Configuration
logging.aspect.enabled=true
logging.aspect.default-warn-threshold-ms=500
logging.aspect.include-args=false
logging.aspect.include-result=false
logging.level.root=${LOG_LEVEL_ROOT:INFO}
logging.level.com.kleadingsolutions.expenseshare=DEBUG
logging.level.org.springframework=WARN
logging.level.org.hibernate.SQL=WARN
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} [%X{requestId}] - %msg%n


# Google JWKS for resource server JWT validation
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs

# OAuth2 (values should come from environment or secret manager; do not commit secrets)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:}
spring.security.oauth2.client.registration.google.scope=openid,profile,email

# (Optional) explicit provider issuer if you want strict issuer validation
spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com